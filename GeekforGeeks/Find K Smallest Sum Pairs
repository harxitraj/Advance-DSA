class Solution {
    public ArrayList<ArrayList<Integer>> kSmallestPair(int[] arr1, int[] arr2, int k) {
        // code here
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        if (arr1.length == 0 || arr2.length == 0 || k == 0)
            return result;
        PriorityQueue<int[]> minHeap = new PriorityQueue<>((a, b) -> (a[0] + a[1]) - (b[0] + b[1]));
        for (int i = 0; i < Math.min(k, arr1.length); i++) {
            minHeap.offer(new int[]{arr1[i], arr2[0], 0});
        }
        while (k-- > 0 && !minHeap.isEmpty()) {
            int[] curr = minHeap.poll();
            int num1 = curr[0], num2 = curr[1], idx2 = curr[2];

            ArrayList<Integer> pair = new ArrayList<>();
            pair.add(num1);
            pair.add(num2);
            result.add(pair);
            if (idx2 + 1 < arr2.length) {
                minHeap.offer(new int[]{num1, arr2[idx2 + 1], idx2 + 1});
            }
        }

        return result;
    }
}
