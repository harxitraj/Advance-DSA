class Solution {
    private static class Cell implements Comparable<Cell> {
        int r, c, cost;
        Cell(int r, int c, int cost) { this.r = r; this.c = c; this.cost = cost; }
        public int compareTo(Cell o) { return Integer.compare(this.cost, o.cost); }
    }

    public int swimInWater(int[][] grid) {
        int n = grid.length;
        boolean[][] visited = new boolean[n][n];
        PriorityQueue<Cell> pq = new PriorityQueue<>();
        pq.add(new Cell(0, 0, grid[0][0]));
        int[][] dirs = {{1,0},{-1,0},{0,1},{0,-1}};
        
        while (!pq.isEmpty()) {
            Cell cur = pq.poll();
            if (visited[cur.r][cur.c]) continue;
            visited[cur.r][cur.c] = true;

            if (cur.r == n - 1 && cur.c == n - 1) return cur.cost;
            
            for (int[] d : dirs) {
                int nr = cur.r + d[0], nc = cur.c + d[1];
                if (nr >= 0 && nr < n && nc >= 0 && nc < n && !visited[nr][nc]) {
                    int newCost = Math.max(cur.cost, grid[nr][nc]);
                    pq.add(new Cell(nr, nc, newCost));
                }
            }
        }
        return -1;
        
    }
}
